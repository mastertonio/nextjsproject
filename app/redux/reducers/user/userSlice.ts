import { useLocalStorage } from "@mantine/hooks";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import axios from "axios";

import type { AppState, AppThunk } from "@redux/store";
import { fetchUser } from "./userAPI";

interface iUserProps {
  verification_code: string;
  phone: number;
  manager: string;
  first_name: string;
  last_name: string;
  currency: number;
  email_verified_at: string;
  remember_token: string;
  role: string;
  isEmailVerified: boolean;
  name: string;
  email: string;
  company_id: string | number;
  id: string;
}

export interface UserState {
  user: iUserProps | null;
  isAuthenticated: boolean;
  isLoading: boolean;
}



const initialState: UserState = {
  user: null,
  isAuthenticated: false,
  isLoading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  "user/login",
  async (userInfo: { email: string; password: string }) => {
    const [value, setValue] = useLocalStorage({ key: "auth-token" });
    console.log(userInfo, "userInfo");
    try {
      const response = await fetchUser(userInfo);
      setValue(response.data.tokens.access.token);
      // The value we return becomes the `fulfilled` action payload
      return response;
    } catch (error) {
      return error;
    }
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: () => initialState,
    login: (state, action: PayloadAction<iUserProps>) => {
      state.user = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.isLoading = false;
      });
  },
});

export const { login } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: AppState) => state.user;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (
//     dispatch: (arg0: { payload: number; type: string }) => void,
//     getState: () => any
//   ) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default userSlice.reducer;
